FUNCTION_BLOCK FB_RFIDReader
VAR_INPUT
    Enable          : BOOL;         // Enable RFID reader
    Read_Command    : BOOL;         // Manual read command
    Reset_Command   : BOOL;         // Reset reader
    Auto_Read       : BOOL := TRUE; // Automatic read on tag presence
END_VAR

VAR_OUTPUT
    Ready           : BOOL;         // Reader ready status
    Reading         : BOOL;         // Read operation in progress
    Valid_Read      : BOOL;         // Valid tag read completed
    Error           : BOOL;         // Reader error
    Tag_Present     : BOOL;         // Tag present on reader
END_VAR

VAR_IN_OUT
    RFID_Data       : DUT_RFIDData; // RFID data structure
END_VAR

VAR
    (* Timers *)
    Read_Timer      : TON;          // Read operation timer
    Presence_Timer  : TON;          // Tag presence debounce timer
    Error_Timer     : TON;          // Error detection timer
    Valid_Timer     : TON;          // Valid read pulse timer
    
    (* Internal variables *)
    Read_Request    : BOOL;         // Internal read request
    Tag_Stable      : BOOL;         // Tag presence stable
    Read_In_Progress : BOOL;        // Read operation active
    Simulated_Tag_ID : DINT := 16#12345678; // Simulated tag ID for testing
    
    (* Edge detection *)
    Read_Edge       : R_TRIG;       // Read command edge
    Tag_Present_Edge : R_TRIG;      // Tag present edge
    
    (* Parameters *)
    Read_Time       : TIME := T#2s;  // Read operation time
    Presence_Debounce : TIME := T#100ms; // Tag presence debounce time
    Valid_Pulse_Time : TIME := T#1s; // Valid read pulse time
END_VAR

(* Initialize from I/O - Reader 1 or 2 determined by calling program *)
RFID_Data.Ready := Enable;
Tag_Present := RFID_Data.Tag_Present;

(* Edge detection *)
Read_Edge(CLK := Read_Command);
Tag_Present_Edge(CLK := Tag_Present);

(* Reset logic *)
IF Reset_Command THEN
    RFID_Data.Status := DUT_RFIDStatus.RFID_IDLE;
    RFID_Data.Error_Code := 0;
    RFID_Data.Tag_ID := 0;
    Read_In_Progress := FALSE;
    Valid_Read := FALSE;
    Error := FALSE;
    Reading := FALSE;
    Read_Timer(IN := FALSE);
    Valid_Timer(IN := FALSE);
END_IF

(* Tag presence debounce *)
Presence_Timer(IN := Tag_Present, PT := Presence_Debounce);
Tag_Stable := Presence_Timer.Q;

(* Auto read trigger *)
IF Auto_Read AND Tag_Present_Edge.Q AND Tag_Stable THEN
    Read_Request := TRUE;
END_IF

(* Manual read trigger *)
IF Read_Edge.Q AND Enable THEN
    Read_Request := TRUE;
END_IF

(* Main RFID state machine *)
CASE RFID_Data.Status OF
    
    DUT_RFIDStatus.RFID_IDLE:
        Ready := Enable;
        Reading := FALSE;
        Valid_Read := FALSE;
        Error := FALSE;
        
        IF Enable AND Read_Request AND Tag_Stable THEN
            RFID_Data.Status := DUT_RFIDStatus.RFID_READING;
            Read_In_Progress := TRUE;
            RFID_Data.Read_Timer := 0;
        END_IF
    
    DUT_RFIDStatus.RFID_READING:
        Ready := FALSE;
        Reading := TRUE;
        Read_Request := FALSE;
        
        (* Simulate read operation with timer *)
        Read_Timer(IN := TRUE, PT := Read_Time);
        
        IF NOT Tag_Stable THEN
            (* Tag removed during read *)
            RFID_Data.Status := DUT_RFIDStatus.RFID_NO_TAG;
            Read_Timer(IN := FALSE);
        ELSIF Read_Timer.Q THEN
            (* Read complete - simulate successful read *)
            RFID_Data.Tag_ID := Simulated_Tag_ID + TO_DINT(RFID_Data.Valid_Read_Count);
            RFID_Data.Status := DUT_RFIDStatus.RFID_VALID_READ;
            RFID_Data.Valid_Read_Count := RFID_Data.Valid_Read_Count + 1;
            Read_Timer(IN := FALSE);
            Valid_Timer(IN := TRUE, PT := Valid_Pulse_Time);
        END_IF
    
    DUT_RFIDStatus.RFID_VALID_READ:
        Ready := FALSE;
        Reading := FALSE;
        Valid_Read := TRUE;
        
        (* Valid read pulse timer *)
        Valid_Timer(IN := TRUE, PT := Valid_Pulse_Time);
        IF Valid_Timer.Q THEN
            RFID_Data.Status := DUT_RFIDStatus.RFID_IDLE;
            Valid_Read := FALSE;
            Valid_Timer(IN := FALSE);
            Read_In_Progress := FALSE;
        END_IF
    
    DUT_RFIDStatus.RFID_NO_TAG:
        Ready := FALSE;
        Reading := FALSE;
        Valid_Read := FALSE;
        
        (* Return to idle when tag is stable again or after timeout *)
        IF Tag_Stable OR NOT Enable THEN
            RFID_Data.Status := DUT_RFIDStatus.RFID_IDLE;
            Read_In_Progress := FALSE;
        END_IF
    
    DUT_RFIDStatus.RFID_ERROR:
        Ready := FALSE;
        Reading := FALSE;
        Valid_Read := FALSE;
        Error := TRUE;
        
        RFID_Data.Error_Count := RFID_Data.Error_Count + 1;
        
        (* Reset on reset command or disable *)
        IF Reset_Command OR NOT Enable THEN
            RFID_Data.Status := DUT_RFIDStatus.RFID_IDLE;
            Error := FALSE;
            Read_In_Progress := FALSE;
        END_IF

END_CASE

(* Error detection (simulate random errors for testing) *)
Error_Timer(IN := Reading AND (RFID_Data.Valid_Read_Count MOD 50 = 49), PT := T#500ms);
IF Error_Timer.Q THEN
    RFID_Data.Status := DUT_RFIDStatus.RFID_ERROR;
    RFID_Data.Error_Code := 1; (* Read error *)
    Error_Timer(IN := FALSE);
END_IF

(* Update read timer *)
IF Reading THEN
    RFID_Data.Read_Timer := RFID_Data.Read_Timer + 1;
ELSE
    RFID_Data.Read_Timer := 0;
END_IF