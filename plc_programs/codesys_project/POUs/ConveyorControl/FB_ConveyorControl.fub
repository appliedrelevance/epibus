FUNCTION_BLOCK FB_ConveyorControl
VAR_INPUT
    Enable          : BOOL;         // Enable conveyor operation
    Run_Command     : BOOL;         // Run command from higher level
    Speed_Setpoint  : INT := 1000;  // Speed setpoint in mm/min
    Auto_Mode       : BOOL := TRUE; // Automatic mode
    Reset_Command   : BOOL;         // Reset command
END_VAR

VAR_OUTPUT
    Motor_Output    : BOOL;         // Motor control output
    Running         : BOOL;         // Conveyor running status
    Fault           : BOOL;         // Fault status
    Ready           : BOOL;         // Ready for operation
END_VAR

VAR_IN_OUT
    Conveyor_Data   : DUT_ConveyorData; // Conveyor data structure
END_VAR

VAR
    Entry_Sensor_Edge   : R_TRIG;      // Entry sensor rising edge
    Exit_Sensor_Edge    : R_TRIG;      // Exit sensor rising edge
    Run_Timer_TON       : TON;         // Run timer
    Fault_Timer_TON     : TON;         // Fault detection timer
    Auto_Stop_Timer_TON : TON;         // Auto stop timer
    
    Internal_Run_Request : BOOL;       // Internal run request
    Item_Present         : BOOL;       // Item present on conveyor
    Auto_Stop_Delay      : TIME := T#5s; // Auto stop delay
END_VAR

(* Reset logic *)
IF Reset_Command THEN
    Conveyor_Data.Status := DUT_ConveyorStatus.CONVEYOR_STOPPED;
    Conveyor_Data.Fault_Code := 0;
    Conveyor_Data.Run_Timer := 0;
    Motor_Output := FALSE;
    Running := FALSE;
    Fault := FALSE;
    Internal_Run_Request := FALSE;
END_IF

(* Update sensor data from inputs *)
Entry_Sensor_Edge(CLK := Conveyor_Data.Entry_Sensor);
Exit_Sensor_Edge(CLK := Conveyor_Data.Exit_Sensor);

(* Item counting logic *)
IF Entry_Sensor_Edge.Q THEN
    Conveyor_Data.Item_Count := Conveyor_Data.Item_Count + 1;
END_IF

(* Item presence detection *)
Item_Present := Conveyor_Data.Entry_Sensor OR Conveyor_Data.Exit_Sensor;

(* Automatic conveyor control logic *)
IF Conveyor_Data.Auto_Mode THEN
    (* Start conveyor when item detected at entry *)
    IF Entry_Sensor_Edge.Q THEN
        Internal_Run_Request := TRUE;
    END_IF
    
    (* Auto stop timer - stop conveyor after delay when no items present *)
    Auto_Stop_Timer_TON(IN := NOT Item_Present AND Running, PT := Auto_Stop_Delay);
    IF Auto_Stop_Timer_TON.Q THEN
        Internal_Run_Request := FALSE;
    END_IF
ELSE
    (* Manual mode - use external run command *)
    Internal_Run_Request := Run_Command;
END_IF

(* Main state machine *)
CASE Conveyor_Data.Status OF
    
    DUT_ConveyorStatus.CONVEYOR_STOPPED:
        Motor_Output := FALSE;
        Running := FALSE;
        Ready := Enable AND NOT Fault;
        
        IF Enable AND NOT Fault AND (Internal_Run_Request OR Run_Command) THEN
            Conveyor_Data.Status := DUT_ConveyorStatus.CONVEYOR_RUNNING;
        END_IF
    
    DUT_ConveyorStatus.CONVEYOR_RUNNING:
        Motor_Output := TRUE;
        Running := TRUE;
        Ready := TRUE;
        
        (* Increment run timer *)
        Conveyor_Data.Run_Timer := Conveyor_Data.Run_Timer + 1;
        
        (* Check for stop conditions *)
        IF NOT Enable OR Fault THEN
            Conveyor_Data.Status := DUT_ConveyorStatus.CONVEYOR_STOPPED;
        ELSIF NOT Internal_Run_Request AND NOT Run_Command THEN
            Conveyor_Data.Status := DUT_ConveyorStatus.CONVEYOR_STOPPED;
        END_IF
    
    DUT_ConveyorStatus.CONVEYOR_FAULT:
        Motor_Output := FALSE;
        Running := FALSE;
        Ready := FALSE;
        Fault := TRUE;
        
        IF Reset_Command THEN
            Conveyor_Data.Status := DUT_ConveyorStatus.CONVEYOR_STOPPED;
            Fault := FALSE;
        END_IF
        
    DUT_ConveyorStatus.CONVEYOR_MAINTENANCE:
        Motor_Output := FALSE;
        Running := FALSE;
        Ready := FALSE;
        (* Maintenance mode - manual override required *)

END_CASE

(* Fault detection *)
Fault_Timer_TON(IN := (Running AND NOT Motor_Output), PT := T#2s);
IF Fault_Timer_TON.Q THEN
    Conveyor_Data.Status := DUT_ConveyorStatus.CONVEYOR_FAULT;
    Conveyor_Data.Fault_Code := 1; (* Motor feedback fault *)
END_IF

(* Update speed setpoint *)
Conveyor_Data.Speed_Setpoint := Speed_Setpoint;

(* Run timer *)
Run_Timer_TON(IN := Running, PT := T#1s);
IF Run_Timer_TON.Q THEN
    Run_Timer_TON(IN := FALSE);
    (* Timer reset for continuous counting *)
END_IF