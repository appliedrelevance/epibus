FUNCTION_BLOCK FB_PickOperationControl
VAR_INPUT
    System_Enable       : BOOL;             // System enable
    Reset_Command       : BOOL;             // Reset all operations
END_VAR

VAR_OUTPUT
    Pick_Active         : BOOL;             // Pick operation active
    Assembly_Active     : BOOL;             // Assembly operation active  
    Receiving_Active    : BOOL;             // Receiving operation active
    Warehouse_Active    : BOOL;             // Warehouse operation active
    Operation_Error     : BOOL;             // Operation error
END_VAR

VAR
    (* Pick operation timers - 20 second operations *)
    Assembly_Timer      : TON;              // Assembly operation timer
    Receiving_Timer     : TON;              // Receiving operation timer
    Warehouse_Timer     : TON;              // Warehouse operation timer
    
    (* Complete signal timers - 10 second pulses *)
    Assembly_Complete_Timer    : TON;       // Assembly complete pulse timer
    Receiving_Complete_Timer   : TON;       // Receiving complete pulse timer
    Warehouse_Complete_Timer   : TON;       // Warehouse complete pulse timer
    
    (* Operation control variables *)
    Any_Bin_Selected    : BOOL;             // Any bin selection active
    Assembly_Requested  : BOOL;             // Assembly operation requested
    Receiving_Requested : BOOL;             // Receiving operation requested
    Warehouse_Requested : BOOL;             // Warehouse operation requested
    
    (* Operation state variables *)
    Assembly_In_Progress  : BOOL;           // Assembly operation in progress
    Receiving_In_Progress : BOOL;           // Receiving operation in progress
    Warehouse_In_Progress : BOOL;           // Warehouse operation in progress
    
    (* Operation times *)
    Operation_Time      : TIME := T#20s;    // Standard operation time
    Complete_Pulse_Time : TIME := T#10s;    // Complete signal pulse time
END_VAR

(* Reset logic *)
IF Reset_Command THEN
    (* Reset all timers *)
    Assembly_Timer(IN := FALSE);
    Receiving_Timer(IN := FALSE);
    Warehouse_Timer(IN := FALSE);
    Assembly_Complete_Timer(IN := FALSE);
    Receiving_Complete_Timer(IN := FALSE);
    Warehouse_Complete_Timer(IN := FALSE);
    
    (* Reset all states *)
    Assembly_In_Progress := FALSE;
    Receiving_In_Progress := FALSE;
    Warehouse_In_Progress := FALSE;
    
    (* Reset MODBUS signals *)
    GVL_MODBUS.Pick_To_Assembly_In_Process := FALSE;
    GVL_MODBUS.Pick_To_Assembly_Complete := FALSE;
    GVL_MODBUS.Pick_To_Receiving_In_Process := FALSE;
    GVL_MODBUS.Pick_To_Receiving_Complete := FALSE;
    GVL_MODBUS.Pick_To_Warehouse_In_Process := FALSE;
    GVL_MODBUS.Pick_To_Warehouse_Complete := FALSE;
END_IF

(* Detect any bin selection from ERP system *)
Any_Bin_Selected := GVL_MODBUS.Pick_Bin_01 OR 
                   GVL_MODBUS.Pick_Bin_02 OR 
                   GVL_MODBUS.Pick_Bin_03 OR 
                   GVL_MODBUS.Pick_Bin_04 OR 
                   GVL_MODBUS.Pick_Bin_05 OR 
                   GVL_MODBUS.Pick_Bin_06 OR 
                   GVL_MODBUS.Pick_Bin_07 OR 
                   GVL_MODBUS.Pick_Bin_08 OR 
                   GVL_MODBUS.Pick_Bin_09 OR 
                   GVL_MODBUS.Pick_Bin_10 OR 
                   GVL_MODBUS.Pick_Bin_11 OR 
                   GVL_MODBUS.Pick_Bin_12;

(* Determine operation type based on station selection *)
Assembly_Requested := Any_Bin_Selected AND GVL_MODBUS.To_Assembly_Sta_2;
Receiving_Requested := Any_Bin_Selected AND GVL_MODBUS.To_Receiving_Sta_1;
Warehouse_Requested := Any_Bin_Selected AND 
                      NOT GVL_MODBUS.To_Assembly_Sta_2 AND 
                      NOT GVL_MODBUS.To_Receiving_Sta_1;

(* Update current bin selection for MODBUS *)
IF GVL_MODBUS.Pick_Bin_01 THEN GVL_MODBUS.Current_Bin_Selection := 1;
ELSIF GVL_MODBUS.Pick_Bin_02 THEN GVL_MODBUS.Current_Bin_Selection := 2;
ELSIF GVL_MODBUS.Pick_Bin_03 THEN GVL_MODBUS.Current_Bin_Selection := 3;
ELSIF GVL_MODBUS.Pick_Bin_04 THEN GVL_MODBUS.Current_Bin_Selection := 4;
ELSIF GVL_MODBUS.Pick_Bin_05 THEN GVL_MODBUS.Current_Bin_Selection := 5;
ELSIF GVL_MODBUS.Pick_Bin_06 THEN GVL_MODBUS.Current_Bin_Selection := 6;
ELSIF GVL_MODBUS.Pick_Bin_07 THEN GVL_MODBUS.Current_Bin_Selection := 7;
ELSIF GVL_MODBUS.Pick_Bin_08 THEN GVL_MODBUS.Current_Bin_Selection := 8;
ELSIF GVL_MODBUS.Pick_Bin_09 THEN GVL_MODBUS.Current_Bin_Selection := 9;
ELSIF GVL_MODBUS.Pick_Bin_10 THEN GVL_MODBUS.Current_Bin_Selection := 10;
ELSIF GVL_MODBUS.Pick_Bin_11 THEN GVL_MODBUS.Current_Bin_Selection := 11;
ELSIF GVL_MODBUS.Pick_Bin_12 THEN GVL_MODBUS.Current_Bin_Selection := 12;
ELSE GVL_MODBUS.Current_Bin_Selection := 0;
END_IF

(* Assembly Operation Control *)
IF Assembly_Requested AND NOT Assembly_In_Progress AND System_Enable THEN
    (* Start assembly operation *)
    Assembly_In_Progress := TRUE;
    GVL_MODBUS.Pick_To_Assembly_In_Process := TRUE;
    Assembly_Timer(IN := TRUE, PT := Operation_Time);
END_IF

IF Assembly_In_Progress THEN
    Assembly_Timer(IN := TRUE, PT := Operation_Time);
    IF Assembly_Timer.Q THEN
        (* Complete assembly operation *)
        GVL_MODBUS.Pick_To_Assembly_Complete := TRUE;
        GVL_MODBUS.Pick_To_Assembly_In_Process := FALSE;
        Assembly_In_Progress := FALSE;
        Assembly_Timer(IN := FALSE);
        
        (* Update statistics *)
        GVL_MODBUS.Assembly_Picks := GVL_MODBUS.Assembly_Picks + 1;
        GVL_MODBUS.Pick_Operations_Total := GVL_MODBUS.Pick_Operations_Total + 1;
        
        (* Start complete signal timer *)
        Assembly_Complete_Timer(IN := TRUE, PT := Complete_Pulse_Time);
    END_IF;
END_IF

(* Receiving Operation Control *)
IF Receiving_Requested AND NOT Receiving_In_Progress AND System_Enable THEN
    (* Start receiving operation *)
    Receiving_In_Progress := TRUE;
    GVL_MODBUS.Pick_To_Receiving_In_Process := TRUE;
    Receiving_Timer(IN := TRUE, PT := Operation_Time);
END_IF

IF Receiving_In_Progress THEN
    Receiving_Timer(IN := TRUE, PT := Operation_Time);
    IF Receiving_Timer.Q THEN
        (* Complete receiving operation *)
        GVL_MODBUS.Pick_To_Receiving_Complete := TRUE;
        GVL_MODBUS.Pick_To_Receiving_In_Process := FALSE;
        Receiving_In_Progress := FALSE;
        Receiving_Timer(IN := FALSE);
        
        (* Update statistics *)
        GVL_MODBUS.Receiving_Picks := GVL_MODBUS.Receiving_Picks + 1;
        GVL_MODBUS.Pick_Operations_Total := GVL_MODBUS.Pick_Operations_Total + 1;
        
        (* Start complete signal timer *)
        Receiving_Complete_Timer(IN := TRUE, PT := Complete_Pulse_Time);
    END_IF;
END_IF

(* Warehouse Operation Control *)
IF Warehouse_Requested AND NOT Warehouse_In_Progress AND System_Enable THEN
    (* Start warehouse operation *)
    Warehouse_In_Progress := TRUE;
    GVL_MODBUS.Pick_To_Warehouse_In_Process := TRUE;
    Warehouse_Timer(IN := TRUE, PT := Operation_Time);
END_IF

IF Warehouse_In_Progress THEN
    Warehouse_Timer(IN := TRUE, PT := Operation_Time);
    IF Warehouse_Timer.Q THEN
        (* Complete warehouse operation *)
        GVL_MODBUS.Pick_To_Warehouse_Complete := TRUE;
        GVL_MODBUS.Pick_To_Warehouse_In_Process := FALSE;
        Warehouse_In_Progress := FALSE;
        Warehouse_Timer(IN := FALSE);
        
        (* Update statistics *)
        GVL_MODBUS.Warehouse_Picks := GVL_MODBUS.Warehouse_Picks + 1;
        GVL_MODBUS.Pick_Operations_Total := GVL_MODBUS.Pick_Operations_Total + 1;
        
        (* Start complete signal timer *)
        Warehouse_Complete_Timer(IN := TRUE, PT := Complete_Pulse_Time);
    END_IF;
END_IF

(* Complete signal pulse management *)
Assembly_Complete_Timer(IN := GVL_MODBUS.Pick_To_Assembly_Complete, PT := Complete_Pulse_Time);
IF Assembly_Complete_Timer.Q THEN
    GVL_MODBUS.Pick_To_Assembly_Complete := FALSE;
    Assembly_Complete_Timer(IN := FALSE);
END_IF

Receiving_Complete_Timer(IN := GVL_MODBUS.Pick_To_Receiving_Complete, PT := Complete_Pulse_Time);
IF Receiving_Complete_Timer.Q THEN
    GVL_MODBUS.Pick_To_Receiving_Complete := FALSE;
    Receiving_Complete_Timer(IN := FALSE);
END_IF

Warehouse_Complete_Timer(IN := GVL_MODBUS.Pick_To_Warehouse_Complete, PT := Complete_Pulse_Time);
IF Warehouse_Complete_Timer.Q THEN
    GVL_MODBUS.Pick_To_Warehouse_Complete := FALSE;
    Warehouse_Complete_Timer(IN := FALSE);
END_IF

(* Update output status *)
Pick_Active := Assembly_In_Progress OR Receiving_In_Progress OR Warehouse_In_Progress;
Assembly_Active := Assembly_In_Progress;
Receiving_Active := Receiving_In_Progress;
Warehouse_Active := Warehouse_In_Progress;

(* System status for MODBUS *)
IF Pick_Active THEN
    GVL_MODBUS.PLC_Cycle_Running := TRUE;
    GVL_MODBUS.PLC_Cycle_Stopped := FALSE;
ELSE
    GVL_MODBUS.PLC_Cycle_Running := FALSE;
    GVL_MODBUS.PLC_Cycle_Stopped := TRUE;
END_IF

(* Error status (perfect world system - no errors) *)
GVL_MODBUS.Pick_Error := FALSE;
Operation_Error := FALSE;