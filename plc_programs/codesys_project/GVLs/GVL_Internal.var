{attribute 'qualified_only'}
VAR_GLOBAL
    (* System Control Variables *)
    System_Initialize           : BOOL := TRUE;    // System initialization flag
    System_State                : INT := 0;        // 0=Stopped, 1=Starting, 2=Running, 3=Stopping, 4=Error
    Manual_Mode_Active          : BOOL := FALSE;   // Manual operation mode
    Safety_Circuit_OK           : BOOL := FALSE;   // Safety circuit status
    Emergency_Stop_Active       : BOOL := FALSE;   // Emergency stop status
    
    (* Timing Variables *)
    System_Cycle_Time           : TIME := T#100ms;  // Main program cycle time
    Uptime_Timer_Internal       : INT := 0;         // Internal uptime counter
    Heartbeat_Timer             : INT := 0;         // System heartbeat counter
    
    (* Robot Operation Variables *)
    Robot_State                 : INT := 0;         // Robot state machine
    Robot_Target_Bin            : INT := 0;         // Target bin number (1-12)
    Robot_Target_Station        : INT := 0;         // Target station (1=Receiving, 2=Assembly, 3=Warehouse)
    Robot_Operation_Timer       : INT := 0;         // Robot operation timer
    Robot_Operation_Complete    : BOOL := FALSE;    // Robot operation completion flag
    
    (* Conveyor Control Variables *)
    Conveyor_Auto_Mode          : BOOL := TRUE;     // Automatic conveyor control
    Conveyor1_Run_Request       : BOOL := FALSE;    // Conveyor 1 run request
    Conveyor2_Run_Request       : BOOL := FALSE;    // Conveyor 2 run request
    Conveyor3_Run_Request       : BOOL := FALSE;    // Conveyor 3 run request
    Conveyor4_Run_Request       : BOOL := FALSE;    // Conveyor 4 run request
    
    (* Pick Operation Variables *)
    Pick_Operation_Active       : BOOL := FALSE;    // Pick operation in progress
    Pick_Operation_Type         : INT := 0;         // 1=Assembly, 2=Receiving, 3=Warehouse
    Pick_Operation_Timer        : INT := 0;         // Pick operation timer (200 = 20 seconds)
    Pick_Complete_Timer         : INT := 0;         // Complete signal timer (100 = 10 seconds)
    Any_Bin_Selected            : BOOL := FALSE;    // Any bin selection active
    
    (* Station Control Variables *)
    Assembly_Requested          : BOOL := FALSE;    // Assembly operation requested
    Receiving_Requested         : BOOL := FALSE;    // Receiving operation requested
    Warehouse_Requested         : BOOL := FALSE;    // Warehouse operation requested
    
    (* RFID Processing Variables *)
    RFID1_Processing            : BOOL := FALSE;    // RFID reader 1 processing
    RFID2_Processing            : BOOL := FALSE;    // RFID reader 2 processing
    RFID1_Read_Timer            : INT := 0;         // RFID reader 1 read timer
    RFID2_Read_Timer            : INT := 0;         // RFID reader 2 read timer
    
    (* Error Handling Variables *)
    Error_Code                  : INT := 0;         // Current error code
    Error_Timer                 : INT := 0;         // Error condition timer
    Error_Reset_Request         : BOOL := FALSE;    // Error reset request
    
    (* Safety Variables *)
    Safety_Gate_Closed          : BOOL := TRUE;     // Safety gate status
    Light_Curtain_Clear         : BOOL := TRUE;     // Light curtain status
    Safety_Reset_Required       : BOOL := FALSE;    // Safety reset required
    
    (* Beacon Control Variables *)
    Beacon_Flash_Timer          : INT := 0;         // Beacon flash timing
    Beacon_Flash_State          : BOOL := FALSE;    // Beacon flash state
    Status_Light_Pattern        : INT := 0;         // Status light pattern
    
    (* Diagnostic Variables *)
    Diagnostic_Mode             : BOOL := FALSE;    // Diagnostic mode active
    Performance_Counter         : DINT := 0;        // Performance counter
    Last_Error_Code             : INT := 0;         // Last error code
    Last_Error_Timestamp        : DT;               // Last error timestamp
END_VAR