import { useState, useEffect, useCallback } from 'react';

interface SignalValue {
  value: boolean | number;
  timestamp: number;
  source?: string;
}

interface ModbusSignal {
  name: string;
  signal_name?: string;
  signal_type?: string;
  modbus_address?: number;
  value: boolean | number;
}

interface ModbusConnection {
  name?: string;
  device_name?: string;
  signals: ModbusSignal[];
}

export function useSignalMonitor() {
  const [signals, setSignals] = useState<Record<string, SignalValue>>({});
  const [connected, setConnected] = useState(false);

  // Connect to Frappe's socket service
  useEffect(() => {
    // Setup Frappe socket event listeners
    const setupListeners = () => {
      if (!window.frappe?.socketio?.socket) return false;
      
      // Set initial connection state
      setConnected(window.frappe.socketio.socket.connected);
      
      // Signal update handler
      const handleSignalUpdate = (data: {
        signal: string;
        value: boolean | number;
        timestamp?: number;
        source?: string;
      }) => {
        if (!data?.signal) return;
        
        console.log(`Received signal update for ${data.signal}:`, data);
        
        // Update the signals state
        setSignals(prev => ({
          ...prev,
          [data.signal]: {
            value: data.value,
            timestamp: data.timestamp || Date.now(),
            source: data.source || 'realtime'
          }
        }));
        
        // Dispatch a local event to notify components about this update
        // This helps components like ActionButtons know when to clear their updating state
        const event = new CustomEvent('local-signal-update', {
          detail: {
            signal: data.signal,
            value: data.value,
            timestamp: data.timestamp || Date.now(),
            source: data.source || 'realtime'
          }
        });
        window.dispatchEvent(event);
      };
      
      // Socket connection handlers
      window.frappe.socketio.socket.on('connect', () => setConnected(true));
      window.frappe.socketio.socket.on('disconnect', () => setConnected(false));
      
      // Subscribe to events
      window.frappe.realtime.on('modbus_signal_update', handleSignalUpdate);
      window.frappe.realtime.on('plc:status', (data: { connected?: boolean }) => {
        if (data?.connected !== undefined) setConnected(data.connected);
      });
      
      // Request initial PLC status
      fetch('/api/method/epibus.api.plc.get_plc_status').catch(() => {});
      
      return true;
    };

    // Try to set up immediately or wait for Frappe to load
    let initialized = setupListeners();
    let intervalId: number | undefined;
    
    if (!initialized) {
      intervalId = window.setInterval(() => {
        if (setupListeners() && intervalId) {
          window.clearInterval(intervalId);
        }
      }, 1000);
    }
    
    // Cleanup function
    return () => {
      if (intervalId) window.clearInterval(intervalId);
      if (window.frappe?.realtime) {
        window.frappe.realtime.off('modbus_signal_update');
        window.frappe.realtime.off('plc:status');
      }
    };
  }, []);

  // Load initial signals
  useEffect(() => {
    fetch('/api/method/epibus.api.plc.get_signals')
      .then(response => response.json())
      .then(data => {
        const initialSignals: Record<string, SignalValue> = {};
        
        // Handle connection-based format (most common)
        if (Array.isArray(data) && data[0]?.signals) {
          (data as ModbusConnection[]).forEach(connection => {
            connection.signals?.forEach((signal: ModbusSignal) => {
              initialSignals[signal.name] = {
                value: signal.value,
                timestamp: Date.now(),
                source: 'initial_load'
              };
            });
          });
        }
        // Handle message wrapper format
        else if (data?.message && Array.isArray(data.message)) {
          if (data.message[0]?.signals) {
            // Connection-based format in message
            (data.message as ModbusConnection[]).forEach(connection => {
              connection.signals?.forEach((signal: ModbusSignal) => {
                initialSignals[signal.name] = {
                  value: signal.value,
                  timestamp: Date.now(),
                  source: 'initial_load'
                };
              });
            });
          }
          // Flat signal list
          else if (data.message[0]?.name && 'value' in data.message[0]) {
            (data.message as ModbusSignal[]).forEach((signal: ModbusSignal) => {
              initialSignals[signal.name] = {
                value: signal.value,
                timestamp: Date.now()
              };
            });
          }
        }
        
        if (Object.keys(initialSignals).length > 0) {
          setSignals(initialSignals);
        } else {
          throw new Error('No signals found in response');
        }
      })
      .catch(() => {
        // Fallback to warehouse dashboard API
        fetch('/api/method/epibus.www.warehouse_dashboard.get_modbus_data')
          .then(response => response.json())
          .then(data => {
            if (!data?.message) return;
            
            const fallbackSignals: Record<string, SignalValue> = {};
            (data.message as ModbusConnection[]).forEach(connection => {
              connection.signals?.forEach((signal: ModbusSignal) => {
                fallbackSignals[signal.name] = {
                  value: signal.value,
                  timestamp: Date.now(),
                  source: 'fallback_load'
                };
              });
            });
            
            setSignals(fallbackSignals);
          });
      });
  }, []);

  // Function to write signal values
  const writeSignal = useCallback((signalName: string, value: boolean | number) => {
    return fetch('/api/method/epibus.api.plc.update_signal', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Frappe-CSRF-Token': localStorage.getItem('csrf_token') || ''
      },
      body: JSON.stringify({ signal_id: signalName, value: value })
    })
    .then(response => response.json())
    .then(data => data.success)
    .catch(() => {
      // Fallback to warehouse dashboard API
      return fetch('/api/method/epibus.www.warehouse_dashboard.set_signal_value', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Frappe-CSRF-Token': localStorage.getItem('csrf_token') || ''
        },
        body: JSON.stringify({ signal_id: signalName, value: value })
      })
      .then(response => response.json())
      .then(data => data.status === 'success')
      .catch(() => false);
    });
  }, []);

  return { signals, writeSignal, connected };
}

// TypeScript interface for Frappe's global object
declare global {
  interface Window {
    frappe?: {
      realtime: {
        on: (event: string, callback: (data: any) => void) => void;
        off: (event: string, callback?: (data: any) => void) => void;
      };
      socketio?: {
        socket: {
          connected: boolean;
          on: (event: string, callback: () => void) => void;
        }
      };
    };
  }
}