<context>
# Overview  
EpiBus is a complex Frappe app that provides integration between ERPNext's document events and MODBUS TCP devices through a sophisticated PLC bridge system. This project involves integrating EpiBus into a Frappe Docker setup optimized for Mac M4 (ARM64) systems, ensuring seamless operation of the MODBUS communication layer, real-time monitoring dashboard, and event-driven automation within the containerized environment.

The integration solves the challenge of running industrial automation software (EpiBus) within a modern containerized Frappe/ERPNext deployment, enabling logistics education and intralogistics simulation scenarios with real PLC connectivity.

# Core Features  
## MODBUS TCP Integration
- **ModbusConnection**: Manages physical MODBUS TCP device connections with host, port, and signal definitions
- **ModbusSignal**: Defines specific I/O points on devices with addressing and type information  
- **ModbusAction**: Links Frappe document events to MODBUS operations through configurable server scripts
- **Real-time Communication**: Bidirectional communication with PLCs for reading sensors and controlling actuators

## PLC Bridge System
- **Event Publishing**: Server-Sent Events (SSE) based real-time communication (refactored from SocketIO)
- **Signal Monitoring**: Continuous polling of MODBUS devices for signal changes
- **Event Logging**: Comprehensive logging of all MODBUS operations and system events
- **Status Monitoring**: Real-time connection status tracking for all configured devices

## Web Dashboard
- **Warehouse Dashboard**: React-based frontend for monitoring PLC signals and system status
- **Event Log Display**: Real-time event history with filtering and search capabilities
- **Connection Status**: Visual indicators for PLC connection health and signal states
- **Signal Control**: Manual signal writing capabilities for testing and control

## Docker Integration
- **ARM64 Compatibility**: Full support for Mac M4 Apple Silicon systems
- **Container Orchestration**: Integration with existing Frappe Docker compose setup
- **Service Dependencies**: Proper startup sequencing and health checks
- **Port Management**: Dedicated ports for SSE server (7654) and web interfaces

# User Experience  
## Primary Users
- **Logistics Educators**: Teaching intralogistics concepts with real PLC integration
- **System Administrators**: Managing and monitoring the integrated EpiBus/Frappe system
- **Students**: Interacting with warehouse simulation dashboards and learning automation concepts
- **Developers**: Extending and customizing the EpiBus functionality

## Key User Flows
1. **System Startup**: Docker compose brings up all services including EpiBus PLC bridge
2. **PLC Configuration**: Admin configures MODBUS connections and signal mappings through Frappe UI
3. **Real-time Monitoring**: Users access warehouse dashboard to monitor live PLC signals
4. **Event Automation**: ERPNext document events trigger automated PLC actions (e.g., Stock Entry submission activates conveyor)
5. **Troubleshooting**: Event logs provide detailed history for debugging connection issues

## UI/UX Considerations
- **Responsive Design**: Dashboard works on various screen sizes for classroom use
- **Real-time Updates**: Sub-second signal updates without page refresh
- **Error Handling**: Clear error messages and connection status indicators
- **Accessibility**: Keyboard navigation and screen reader support for educational environments
</context>
<PRD>
# Technical Architecture  
## System Components
- **Frappe/ERPNext Backend**: Core ERP system running in Docker containers
- **EpiBus App**: Custom Frappe app providing MODBUS integration capabilities
- **PLC Bridge**: Python service managing MODBUS TCP communication and SSE event publishing
- **React Frontend**: Modern web dashboard for real-time monitoring and control
- **SSE Server**: Real-time event streaming on port 7654 for frontend communication
- **MODBUS TCP Devices**: External PLCs and simulation software (OpenPLC)

## Data Models
- **ModbusConnection**: Device connection parameters (host, port, enabled status)
- **ModbusSignal**: Signal definitions (address, type, current value, timestamps)
- **ModbusAction**: Event-to-action mappings with server script execution
- **ModbusEvent**: Historical log of all MODBUS operations and system events
- **ServerScript**: Python code defining automation logic for document events

## APIs and Integrations
- **Frappe REST API**: Standard ERPNext document operations and authentication
- **SSE Endpoints**: Real-time event streaming (/events, /signals, /write_signal, /events/history)
- **MODBUS TCP Protocol**: Direct communication with industrial devices
- **Docker Health Checks**: Service monitoring and automatic restart capabilities

## Infrastructure Requirements
- **Docker Desktop**: Mac M4 compatible with ARM64 platform support
- **Network Access**: MODBUS TCP connectivity to PLC devices (typically port 502)
- **Port Allocation**: 55001 (Frappe), 7654 (SSE), plus standard Docker internal ports
- **Storage**: Persistent volumes for database, logs, and configuration files

# Development Roadmap  
## Phase 1: Docker Integration Foundation
- Configure EpiBus app installation within Frappe Docker containers
- Ensure ARM64 compatibility for all EpiBus components
- Set up proper service dependencies and startup sequencing
- Verify MODBUS TCP connectivity from containerized environment
- Test basic Frappe app functionality (DocTypes, permissions, basic UI)

## Phase 2: PLC Bridge Containerization
- Integrate PLC Bridge service into Docker compose configuration
- Configure SSE server to run within container network
- Set up proper port mapping and network access for MODBUS communication
- Implement health checks and restart policies for PLC Bridge service
- Test real-time signal monitoring and event publishing

## Phase 3: Frontend Dashboard Integration
- Build and deploy React frontend within Frappe static file serving
- Configure SSE client connections to work with containerized SSE server
- Implement responsive design for various classroom display scenarios
- Add comprehensive error handling and connection status indicators
- Test real-time updates and manual signal control functionality

## Phase 4: Production Readiness
- Implement comprehensive logging and monitoring
- Add backup and restore procedures for MODBUS configurations
- Create documentation for deployment and troubleshooting
- Performance testing with multiple concurrent PLC connections
- Security hardening and access control implementation

# Logical Dependency Chain
## Foundation First (Phase 1)
- Docker environment must be stable and ARM64 compatible
- Frappe/ERPNext base system must be fully operational
- EpiBus app installation and basic DocType functionality
- Network connectivity testing for MODBUS communication

## Core Services (Phase 2)
- PLC Bridge service integration depends on Phase 1 completion
- SSE server functionality requires working PLC Bridge
- MODBUS device connectivity testing requires both bridge and network setup
- Event logging system requires functional Frappe backend

## User Interface (Phase 3)
- Frontend dashboard requires working SSE server from Phase 2
- Real-time monitoring depends on PLC Bridge signal polling
- Manual control features require bidirectional MODBUS communication
- Error handling requires comprehensive backend event logging

## Production Features (Phase 4)
- Advanced monitoring requires all core functionality from previous phases
- Performance optimization builds on working baseline system
- Security features require understanding of all system components
- Documentation reflects actual working implementation

# Risks and Mitigations  
## Technical Challenges
- **ARM64 Compatibility**: Some Python MODBUS libraries may not have ARM64 wheels
  - *Mitigation*: Test all dependencies early, use alternative libraries if needed
- **Container Networking**: MODBUS TCP communication across Docker networks
  - *Mitigation*: Use host networking mode if bridge networking fails
- **SSE Connection Stability**: Browser connection limits and reconnection handling
  - *Mitigation*: Implement robust reconnection logic and connection pooling

## Integration Complexity
- **Frappe App Dependencies**: EpiBus may conflict with other installed apps
  - *Mitigation*: Test in isolated environment, document all dependencies
- **Database Migrations**: EpiBus schema changes in containerized environment
  - *Mitigation*: Backup database before migrations, test migration scripts
- **Service Startup Order**: PLC Bridge may start before Frappe is ready
  - *Mitigation*: Implement proper health checks and dependency waiting

## Educational Environment Constraints
- **Network Security**: Classroom networks may block MODBUS ports
  - *Mitigation*: Document network requirements, provide simulation alternatives
- **Resource Limitations**: Multiple students running containers simultaneously
  - *Mitigation*: Optimize resource usage, provide shared deployment option
- **Hardware Compatibility**: Various Mac models and Docker configurations
  - *Mitigation*: Test on multiple hardware configurations, document requirements

# Appendix  
## Research Findings
- EpiBus has been successfully refactored from SocketIO to SSE for better performance
- React frontend is already built and tested with the new SSE architecture
- PLC Bridge supports multiple concurrent MODBUS connections
- OpenPLC simulator provides testing environment without physical hardware

## Technical Specifications
- **Supported MODBUS Functions**: Read/Write Coils, Read/Write Holding Registers
- **Connection Limits**: Up to 10 concurrent MODBUS TCP connections
- **Update Frequency**: 2-second polling interval for signal changes
- **Event History**: 100 events retained in memory, unlimited in database
- **Browser Support**: Modern browsers with EventSource API support

## Educational Context
- **Target Audience**: Logistics and supply chain management students
- **Learning Objectives**: Understanding of warehouse automation and PLC integration
- **Hardware Requirements**: Mac M4 systems with Docker Desktop
- **Network Requirements**: Access to MODBUS TCP devices or simulation software
</PRD>